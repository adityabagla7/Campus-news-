======================================================================
üöÄ CAMPUS NEWS - MONGODB QUICK SETUP COMMANDS & PROMPTS
======================================================================

üìã CURSOR AI PROMPTS TO USE:
======================================================================

1. DATABASE INTEGRATION PROMPT:
"Connect this Campus News React app to MongoDB. Set up user authentication, posts CRUD operations, and real-time features. Create proper API endpoints for all the existing frontend features including events, groups, announcements, and library. Make sure to implement proper error handling and validation."

2. API DEVELOPMENT PROMPT:
"Create a complete REST API for the Campus News app with endpoints for:
1. User authentication (register, login, logout)
2. Posts (create, read, update, delete with categories)
3. Comments and likes
4. Events management
5. Groups functionality
6. Announcements system
7. Library resources
Include proper middleware for authentication, validation, and error handling."

3. FRONTEND INTEGRATION PROMPT:
"Update the Campus News React app to use real API endpoints instead of hardcoded data. Implement proper authentication flow, API calls using axios, loading states, error handling, and real-time updates. Make sure all existing UI components work with the backend API."

======================================================================
üîß ESSENTIAL COMMANDS TO RUN:
======================================================================

1. INSTALL DEPENDENCIES:
cd API
npm install express mongoose cors dotenv bcryptjs jsonwebtoken multer helmet morgan compression express-rate-limit joi express-validator nodemailer
npm install --save-dev nodemon concurrently

cd ../client
npm install axios react-query @tanstack/react-query moment react-toastify

2. MONGODB SETUP:
- Go to https://cloud.mongodb.com/
- Create account and cluster
- Get connection string: mongodb+srv://username:password@cluster.mongodb.net/campusnews

3. CREATE .ENV FILE IN API FOLDER:
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/campusnews?retryWrites=true&w=majority
JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random
JWT_EXPIRES_IN=7d
PORT=5000
NODE_ENV=development
CLIENT_URL=http://localhost:3000

4. UPDATE ROOT PACKAGE.JSON:
{
  "scripts": {
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "server": "cd API && npm run dev",
    "client": "cd client && npm start",
    "install-deps": "cd API && npm install && cd ../client && npm install"
  },
  "devDependencies": {
    "concurrently": "^8.2.0"
  }
}

5. UPDATE API PACKAGE.JSON:
{
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  }
}

6. START PROJECT:
npm run install-deps
npm run dev

======================================================================
üîç TESTING COMMANDS:
======================================================================

TEST DATABASE CONNECTION:
cd API && node -e "
const mongoose = require('mongoose');
require('dotenv').config();
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ MongoDB Connected Successfully'))
  .catch(err => console.error('‚ùå MongoDB Connection Error:', err));
"

TEST API ENDPOINTS:
curl -X POST http://localhost:5000/api/auth/register -H "Content-Type: application/json" -d '{"name": "Test User", "email": "test@example.com", "password": "password123"}'

curl -X POST http://localhost:5000/api/auth/login -H "Content-Type: application/json" -d '{"email": "test@example.com", "password": "password123"}'

======================================================================
üìù IMPORTANT FILES TO CREATE/UPDATE:
======================================================================

1. API/config/database.js - MongoDB connection
2. API/models/User.js - User schema
3. API/models/Post.js - Post schema
4. API/routes/auth.js - Authentication routes
5. API/routes/posts.js - Posts routes
6. API/index.js - Main server file
7. client/src/axios.js - API configuration
8. client/src/context/authContext.js - Authentication context

======================================================================
üöÄ DEPLOYMENT CHECKLIST:
======================================================================

‚úÖ MongoDB Atlas cluster created
‚úÖ Environment variables configured
‚úÖ Dependencies installed
‚úÖ API routes implemented
‚úÖ Frontend connected to backend
‚úÖ Authentication working
‚úÖ All pages functional with real data
‚úÖ Error handling implemented
‚úÖ Security middleware added

======================================================================
‚ö†Ô∏è  SECURITY NOTES:
======================================================================

- Never commit .env files to version control
- Use strong JWT secrets in production
- Update CORS settings for production domain
- Implement rate limiting
- Add proper input validation
- Use HTTPS in production

======================================================================
üéØ FINAL RESULT:
======================================================================

After following this guide, your Campus News app will be:
- Connected to MongoDB database
- Fully functional with real backend API
- Ready for production deployment
- Scalable and maintainable
- Secure and optimized

Good luck with your project! üéâ

For detailed implementation, check MONGODB_SETUP_GUIDE.md 